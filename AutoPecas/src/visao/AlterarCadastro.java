/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 13151000014
 */
public class AlterarCadastro extends javax.swing.JFrame {

    /**
     * Creates new form ConsultaVenda
     */
    public AlterarCadastro() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLTitulo = new javax.swing.JLabel();
        jBCancelar = new javax.swing.JButton();
        jBAlterarCad = new javax.swing.JButton();
        jlCadastros = new javax.swing.JLabel();
        jCBCadastros = new javax.swing.JComboBox();
        jLOpcao = new javax.swing.JLabel();
        jCBOpcao = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(99, 113, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLTitulo.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLTitulo.setText("Alterar Cadastro");
        jPanel1.add(jLTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, -1, -1));

        jBCancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(jBCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, 100, -1));

        jBAlterarCad.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBAlterarCad.setText("Alterar Cadastro");
        jBAlterarCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlterarCadActionPerformed(evt);
            }
        });
        jPanel1.add(jBAlterarCad, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 140, -1));

        jlCadastros.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jlCadastros.setText("Cadastros:");
        jPanel1.add(jlCadastros, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, -1));

        jPanel1.add(jCBCadastros, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 170, -1));

        jLOpcao.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLOpcao.setText("Opcao:");
        jPanel1.add(jLOpcao, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jCBOpcao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cliente", "Fornecedor", "Funcionário", "Peças", "Usuário" }));
        jCBOpcao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBOpcaoItemStateChanged(evt);
            }
        });
        jCBOpcao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCBOpcaoMouseClicked(evt);
            }
        });
        jPanel1.add(jCBOpcao, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 170, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBAlterarCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlterarCadActionPerformed
        String aux = jCBCadastros.getSelectedItem().toString();
        String aux2 = aux.substring(aux.indexOf(""),aux.indexOf(" -", aux.indexOf("")));
        FramePrincipal.CodAlterar = Integer.parseInt(aux2);
        
        if(jCBOpcao.getSelectedItem().equals("Cliente")){
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn;
                conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");
                String query = "SELECT nomeCliente, endCliente, cpfCliente, telefoneCliente FROM cliente WHERE idcliente LIKE ?";
                PreparedStatement comando = conn.prepareStatement(query);
                comando.setInt(1 , FramePrincipal.CodAlterar);
                
                ResultSet resultado;
                resultado = comando.executeQuery();;
                resultado.next();
                
                CadCliente cliente = new CadCliente(resultado.getString("nomeCliente"), resultado.getString("endCliente"), resultado.getString("cpfCliente"), resultado.getString("telefoneCliente"));
                cliente.setSize(375, 350);
                cliente.setResizable(false);
                cliente.setVisible(true);
                cliente.setLocationRelativeTo(null);
                

                comando.close();
                conn.close();

            }catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
            } catch (SQLException ex2) {
             JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
            }
                        
        }
        else if(jCBOpcao.getSelectedItem().equals("Fornecedor")){
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn;
                conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");
                String query = "SELECT nomeFornecedor, TelefoneFornecedor, emailFornecedor FROM fornecedor WHERE idfornecedor LIKE ?";
                PreparedStatement comando = conn.prepareStatement(query);
                comando.setInt(1 , FramePrincipal.CodAlterar);
                
                ResultSet resultado;
                resultado = comando.executeQuery();;
                resultado.next();
                
                CadFornecedor fornecedor = new CadFornecedor(resultado.getString("nomeFornecedor"), resultado.getString("telefoneFornecedor"), resultado.getString("emailFornecedor"));
                fornecedor.setSize(375, 350);
                fornecedor.setResizable(false);
                fornecedor.setVisible(true);
                fornecedor.setLocationRelativeTo(null);
                

                comando.close();
                conn.close();

            }catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
            } catch (SQLException ex2) {
             JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
            }
        }

        else if(jCBOpcao.getSelectedItem().equals("Funcionário")){
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn;
                conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");
                String query = "SELECT nomeFuncionario, endFuncionario, cpfFuncionario, telefoneFuncionario, salarioFuncionario, dataFuncionario, emailFuncionario FROM funcionario WHERE idfuncionario LIKE ?";
                PreparedStatement comando = conn.prepareStatement(query);
                comando.setInt(1 , FramePrincipal.CodAlterar);
                
                ResultSet resultado;
                resultado = comando.executeQuery();;
                resultado.next();
                
                CadFuncionario funcionario = new CadFuncionario(resultado.getString("nomeFuncionario"), resultado.getString("endFuncionario"), resultado.getString("cpfFuncionario"), resultado.getString("telefoneFuncionario"), resultado.getString("salarioFuncionario"), resultado.getString("dataFuncionario"), resultado.getString("emailFuncionario"));
                funcionario.setSize(375, 400);
                funcionario.setResizable(false);
                funcionario.setVisible(true);
                funcionario.setLocationRelativeTo(null);
                

                comando.close();
                conn.close();

            }catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
            } catch (SQLException ex2) {
             JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
            }
        }

        else if(jCBOpcao.getSelectedItem().equals("Peças")){
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn;
                conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");
                String query = "SELECT nomePeca, precoPeca, qtdeEstoque , descricao, fornecedor_idfornecedor FROM pecas WHERE idpecas LIKE ?";
                PreparedStatement comando = conn.prepareStatement(query);
                comando.setInt(1 , FramePrincipal.CodAlterar);
                
                ResultSet resultado;
                resultado = comando.executeQuery();;
                resultado.next();
                
                CadPecas pecas = new CadPecas(resultado.getString("nomePeca"), resultado.getString("precoPeca"), resultado.getString("qtdeEstoque"), resultado.getString("descricao"), resultado.getString("fornecedor_idfornecedor"));
                pecas.setSize(375, 460);
                pecas.setResizable(false);
                pecas.setVisible(true);
                pecas.setLocationRelativeTo(null);
                

                comando.close();
                conn.close();

            }catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
            } catch (SQLException ex2) {
             JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
            }
        }

        else{
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn;
                conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");
                String query = "SELECT login, senha, tipoUsuario FROM usuario WHERE idusuario LIKE ?";
                PreparedStatement comando = conn.prepareStatement(query);
                comando.setInt(1 , FramePrincipal.CodAlterar);
                
                ResultSet resultado;
                resultado = comando.executeQuery();;
                resultado.next();
                
                CadUsuario usuario = new CadUsuario(resultado.getString("login"), resultado.getString("senha"));
                usuario.setSize(425, 350);
                usuario.setResizable(false);
                usuario.setVisible(true);
                usuario.setLocationRelativeTo(null);
                

                comando.close();
                conn.close();

            }catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
            } catch (SQLException ex2) {
             JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
            }
        }
        this.dispose();
    }//GEN-LAST:event_jBAlterarCadActionPerformed

    private void jCBOpcaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCBOpcaoMouseClicked
        
    }//GEN-LAST:event_jCBOpcaoMouseClicked

    private void jCBOpcaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBOpcaoItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            if(jCBOpcao.getSelectedItem().equals("Cliente")){
                jCBCadastros.removeAllItems();
                try {
                    Class.forName("com.mysql.jdbc.Driver");

                    Connection conn;

                    conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");

                    String query = "SELECT idcliente, nomeCliente FROM cliente";

                    PreparedStatement comando = conn.prepareStatement(query);

                    ResultSet resultado;

                    resultado = comando.executeQuery();;

                    while(resultado.next()){
                        jCBCadastros.addItem(String.valueOf(resultado.getInt("idcliente") + " - " +resultado.getString("nomeCliente"))); 
                    }        

                    comando.close();
                    conn.close();
            
                } catch (ClassNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
                } catch (SQLException ex2) {
                 JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
                }
            }
            else if(jCBOpcao.getSelectedItem().equals("Fornecedor")){
                jCBCadastros.removeAllItems();
                try {
                    Class.forName("com.mysql.jdbc.Driver");

                    Connection conn;

                    conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");

                    String query = "SELECT idfornecedor, nomeFornecedor FROM fornecedor";

                    PreparedStatement comando = conn.prepareStatement(query);

                    ResultSet resultado;

                    resultado = comando.executeQuery();;

                    while(resultado.next()){
                        jCBCadastros.addItem(String.valueOf(resultado.getInt("idfornecedor") + " - " +resultado.getString("nomeFornecedor"))); 
                    }        

                    comando.close();
                    conn.close();

                }catch (ClassNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
                } catch (SQLException ex2) {
                 JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
                }
            }

            else if(jCBOpcao.getSelectedItem().equals("Funcionário")){
                jCBCadastros.removeAllItems();
                try {
                    Class.forName("com.mysql.jdbc.Driver");

                    Connection conn;

                    conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");

                    String query = "SELECT idfuncionario, nomeFuncionario FROM funcionario";

                    PreparedStatement comando = conn.prepareStatement(query);

                    ResultSet resultado;

                    resultado = comando.executeQuery();;

                    while(resultado.next()){
                        jCBCadastros.addItem(String.valueOf(resultado.getInt("idfuncionario") + " - " +resultado.getString("nomeFuncionario"))); 
                    }        

                    comando.close();
                    conn.close();


                }catch (ClassNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
                } catch (SQLException ex2) {
                 JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
                }
            }

            else if(jCBOpcao.getSelectedItem().equals("Peças")){
                jCBCadastros.removeAllItems();
                try {
                    Class.forName("com.mysql.jdbc.Driver");

                    Connection conn;

                    conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");

                    String query = "SELECT idpecas, nomePeca FROM pecas";

                    PreparedStatement comando = conn.prepareStatement(query);

                    ResultSet resultado;

                    resultado = comando.executeQuery();;

                    while(resultado.next()){
                        jCBCadastros.addItem(String.valueOf(resultado.getInt("idpecas") + " - " +resultado.getString("nomePeca"))); 
                    }        

                    comando.close();
                    conn.close();


                }catch (ClassNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
                } catch (SQLException ex2) {
                 JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
                }
            }

            else{
                jCBCadastros.removeAllItems();
                try {
                    Class.forName("com.mysql.jdbc.Driver");

                    Connection conn;

                    conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");

                    String query = "SELECT idusuario, login FROM usuario";

                    PreparedStatement comando = conn.prepareStatement(query);

                    ResultSet resultado;

                    resultado = comando.executeQuery();;

                    while(resultado.next()){
                        jCBCadastros.addItem(String.valueOf(resultado.getInt("idusuario") + " - " +resultado.getString("login"))); 
                    }        

                    comando.close();
                    conn.close();


                }catch (ClassNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
                } catch (SQLException ex2) {
                 JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
                }
            }
        }
    }//GEN-LAST:event_jCBOpcaoItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection conn;

                conn = DriverManager.getConnection("jdbc:mysql://localhost/dbautopecas", "root", "");

                String query = "SELECT idcliente, nomeCliente FROM cliente";

                PreparedStatement comando = conn.prepareStatement(query);

                ResultSet resultado;

                resultado = comando.executeQuery();;

                while(resultado.next()){
                    jCBCadastros.addItem(String.valueOf(resultado.getInt("idcliente") + " - " +resultado.getString("nomeCliente"))); 
                }        

                comando.close();
                conn.close();

            } catch (ClassNotFoundException ex) {
              JOptionPane.showMessageDialog(null, "Não foi possível encontrar a classe Driver!");
            } catch (SQLException ex2) {
             JOptionPane.showMessageDialog(null, "Ocorreu um erro interno de SQL!"+ex2);
            }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlterarCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlterarCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlterarCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlterarCadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlterarCadastro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAlterarCad;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JComboBox jCBCadastros;
    private javax.swing.JComboBox jCBOpcao;
    private javax.swing.JLabel jLOpcao;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jlCadastros;
    // End of variables declaration//GEN-END:variables
}
